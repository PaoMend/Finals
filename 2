class Employee:
    """Employee class with multiple construction options"""
    
    def __init__(self, name=None, age="N/A", department=None):
        """Main constructor with optional parameters"""
        self.name = name
        self.age = age
        self.department = department
    
    @classmethod
    def from_name_only(cls, name):
        """Constructor that only requires name"""
        return cls(name=name)
    
    @classmethod
    def from_name_and_department(cls, name, department):
        """Constructor that requires name and department"""
        return cls(name=name, department=department)
    
    @classmethod
    def from_dict(cls, emp_dict):
        """Constructor that takes a dictionary of employee data"""
        return cls(**emp_dict)
    
    def __str__(self):
        return f"Employee(Name: {self.name}, Age: {self.age}, Department: {self.department})"


if __name__ == "__main__":
    emp1 = Employee(name="Andrea Sachs", age=26, department="Editor Assistant")
    print("Employee 1:", emp1)
    
    emp2 = Employee.from_name_and_department("Miranda Priestly", "Editor")
    print("Employee 2:", emp2)
